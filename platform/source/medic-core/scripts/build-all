#!/bin/bash

set -o pipefail

self="`readlink -f "$0" 2>/dev/null || realpath "$0"`"
base_dir="`dirname "$self"`/.."

warn()
{
  echo "Warning: $*" >&2
}

fatal()
{
  echo "Fatal error: $*" >&2
  exit 111
}

source "$base_dir/scripts/include/logger" 2>/dev/null &&
source "$base_dir/scripts/include/builder" 2>/dev/null \
  || fatal 'Unable to load a required library'

usage()
{
  echo
  echo "Usage:" >&2
  echo "  $0 root-directory" >&2
  echo

  exit 111
}

main()
{
  local prefix="$1"
  local pkg_start="`echo "$2" | sed -E 's/\//-/g;'`"
  local pkg_start_version="$3"
  local pkg_stop="`echo "$4" | sed -E 's/\//-/g;'`"
  local pkg_stop_version="$5"
  local platform="$6"
  local bits="$7"
  local parallel="$8"

  check_args "$@" || usage

  local uname="`uname -s`"
  local stdarg="--prefix='$prefix'"

  builder_initialize &&
  builder_setup_environment "$prefix" \
    "$pkg_start" "$pkg_start_version" "$pkg_stop" \
      "$pkg_stop_version" "$uname" "$architecture" "$bits" "$parallel"

  [ $? -eq 0 ] \
    || fatal 'Failed to set up build environment'

  # Package-specific options:
  #  These are used to vary configuration based upon
  #  the architecture that we're currently compiling for.

  local erlang_extra_options=""

  if [ "$architecture" = 'intel' -a "$bits" ]; then
    erlang_extra_options="--enable-m${bits}-build"
  fi

  if ! builder_setup_cache; then
    warn 'Compiler caching could not be enabled'
  fi

  builder_remove_static_libraries 'js' &&
  \
  (disable_stack_protector &&
    build_autoconf 'pv' "$stdarg") &&
  \
  if [ "$build_platform" = 'linux-elf' ]; then
    build_make_install 'paxctl' "$prefix" "DESTDIR='$prefix'"
  fi &&
  \
  if [ "$bits" -eq 32 ]; then
    build_make_install 'bladox-tools' "$prefix" "PREFIX='$prefix'"
  fi &&
  \
  build_autoconf 'logrotate' "$stdarg" &&
  \
  (disable_parallelism && build_config 'openssl' \
    "shared no-asm zlib-dynamic --openssldir='$prefix/etc/ssl' $stdarg") &&
  \
  builder_remove_static_libraries 'crypto' 'ssl' &&
  \
  build_autoconf 'openssh' \
    "$stdarg --sysconfdir='$prefix/etc/ssh' \
     --with-zlib='$prefix' --with-ssl-dir='$prefix'" &&
  \
  (ldflags_in_cflags && build_autoconf 'nginx' \
    "$stdarg --sbin-path='$prefix/bin' \
     --with-http_ssl_module --with-http_v2_module \
     --conf-path='$prefix/etc/nginx/nginx.conf' \
     --pid-path='$prefix/var/run/nginx/nginx.pid' \
     --lock-path='$prefix/var/run/nginx/nginx.lock' \
     --error-log-path='$prefix/var/log/nginx/error.log'" \
       "LINK='$CC $CFLAGS $LDFLAGS'") &&
  \
  (simple_cflags &&
    build_autoconf 'node' \
      "$stdarg --shared-zlib --shared-openssl \
       --shared-openssl-libpath='$prefix/lib' \
       --shared-openssl-includes='$prefix/include'") &&
  \
  build_autoconf 'erlang' \
    "$stdarg $build_extra_options --enable-kernel-poll \
     --enable-dynamic-ssl-lib --with-ssl='$prefix' \
     --enable-shared-zlib='$prefix' $erlang_extra_options" &&
  \
  (disable_parallelism && \
    builder_fix_erlang_dso_linkage "$bits") &&
  \
  build_rebar 'rebar' "$prefix" './bootstrap' &&
  build_couchdb 'couchdb' "$prefix" &&
  \
  builder_set_library_executable_bits "$prefix" &&
  builder_remove_library_metadata "$prefix"

  if [ "$?" -ne 0 ]; then
    fatal 'One or more build steps failed; aborting'
  fi

  return 0
}

check_args()
{
  local prefix="$1"

  [ -d "$prefix" ] 
}

cd "$base_dir/source" && main "$@"
exit $?

